const express = require('express');
const path = require('path');
const tiktok = require('./tiktok');
const message = require('./message');
const websocket = require('express-ws');
const q = require('./queue');

const port = 3000;
const app = express();
const queue = new q.Queue();
websocket(app);

// Handle command line args
let email = "";
let password = "";
let handles = [];
for (let i = 2; i < process.argv.length; i++) {
	if (process.argv[i] === '-e' || process.argv[i] === '--email') {
		i++;
		email = process.argv[i];
	} else if (process.argv[i] === '-p' || process.argv[i] === '--password') {
		i++;
		password = process.argv[i];
	} else if (process.argv[i] === '-h' || process.argv[i] === '--handles') {
		i++;
		handles = process.argv[i].split(':');
	}
}

app.use('/images', express.static(__dirname + '/public/images'));

app.get('/',  (req, res) => {
  res.sendFile(path.join(__dirname, 'views/index.html'));
});

app.get('/bot/login', async (req, res) => {
	await tiktok.presentLogin(email, password);
});

app.get('/bot/start', async (req, res) => {
	const cleanHandles = req.query.handles.replaceAll('<br>', '');
	const additionalHandles = cleanHandles.split(":")
	if (additionalHandles[additionalHandles.length - 1] === '') {
		additionalHandles.pop();
	}
	handles = handles.concat(additionalHandles);
	console.log(handles);
	message.send('Starting bot for ' + handles.length + ' accounts...');
	for (var i = handles.length - 1; i >= 0; i--) {
		message.send('Getting videos for ' + handles[i] + '...');
		const urls = await tiktok.getVideoUrls(handles[i]);
		message.send('Found ' + urls.length + ' videos.');

		for (var i = urls.length - 1; i >= 0; i--) {
			queue.enqueue({
				url: urls[i],
				commentsLiked: 0,
				finished: false
			});
		}
		
		const slots = [];
		for (var i = 0; i < 5; i++) {
			slots.push(queue.dequeue());
		}

		while (slots.length > 0) {
			for (var i = slots.length - 1; i >= 0; i--) {
				await tiktok.likeCommentsBatch(slots[i]);
				if (slots[i].finished === true) {
					slots.splice(i, 1);
					if (!queue.isEmpty()) {
						slots.push(queue.dequeue());
					}
				}
			}
		}


		for (var j = urls.length - 1; j >= 0; j--) {
			message.send('Liking comments at ' + urls[j] + '...');
			const count = await tiktok.likeComments(urls[j]);
			message.send('Liked ' + count + ' comments.');
		}
	}
});

app.ws('/log', function(ws, req) {
	message.setup(ws);
});

app.listen(port, () => {
	console.log(`Example app listening on port ${port}`)
});
