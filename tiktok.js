
const puppeteer = require('puppeteer-extra');
const stealth = require('puppeteer-extra-plugin-stealth');
const {executablePath} = require('puppeteer');

// Define TikTok related constants here
const tiktokBaseUrl = "https://tiktok.com/";
const tiktokLoginUrl = "login/phone-or-email/email/";

// Define control flow related constants here
const maxHits = 10;

// Define constants for selectors here
const SEL_VIDEO_DIV = 'div.tiktok-x6y88p-DivItemContainerV2.e19c29qe7';
const SEL_LIKE_DIV = 'div[class*="DivLikeWrapper-StyledLikeWrapper"]';
const SEL_COMMENTS_DIV = 'div[class*="DivCommentContainer"]';
const SEL_VIDEO_LIST_DIV = 'div[class*="DivVideoList"]';
const SEL_EMAIL_FIELD = 'input[name="username"]';
const SEL_PASSWORD_FIELD = 'input[type="password"]';

puppeteer.use(stealth())

let browser;
let page;
let commentPages = {};

async function presentLogin(email, password) {
	browser = await puppeteer.launch({
  	headless: false,
  	executablePath: executablePath()
	});
	page = await browser.newPage();

	await page.goto(tiktokBaseUrl + tiktokLoginUrl);

  if (email !== '') {
  	await page.waitForSelector(SEL_EMAIL_FIELD);
  	await page.type(SEL_EMAIL_FIELD, email);
  	await page.type(SEL_PASSWORD_FIELD, password);
  }
}

async function getVideoUrls(username) {
	await page.goto(tiktokBaseUrl + '@' + username);
  await page.waitForSelector(SEL_VIDEO_DIV);

  await page.evaluate(async (SEL_VIDEO_DIV) => {
    const sleep = ms => new Promise(r => setTimeout(r, ms));

    while (true) {
      await window.scrollBy(0, window.innerHeight);
      await sleep(1000);
      if (document.querySelectorAll(SEL_VIDEO_DIV).length > 50) {
        break;
      }
    }
  }, SEL_VIDEO_DIV);

  const videoDivs = await page.$$(SEL_VIDEO_DIV);
  let videoUrls = [];

	for (var i = videoDivs.length - 1; i >= 0; i--) {
		const url = await videoDivs[i].$eval('a', a => {
			if (typeof a.getAttribute === 'function') {
				return a.getAttribute('href');
			} else {
				return "";
			}
		});
		if (url !== "") {
			videoUrls.push(url);
		}
	}
  page.close();
	return videoUrls;
}

// Watch video
// Like comments in random order
// Go back and forth between tabs
// Increments of liking 10-15 comments

// What happens if you have the bot log out 
async function likeCommentsBatch(video) {
  let commentPage;
  console.log(video.url);
  if (video.url in commentPages) {
    commentPage = commentPages[video.url].page;
  } else {
    commentPage = await browser.newPage();
    await commentPage.goto(video.url);
    await commentPage.waitForSelector(SEL_LIKE_DIV);
    commentPages[video.url] = {
      page: commentPage
    };
  }

  // hook global scope see what variables show up or not
  
  const result = await commentPage.evaluate(async (SEL_LIKE_DIV, SEL_COMMENTS_DIV, SEL_VIDEO_LIST_DIV, maxHits) => {
    let count = 0;
    const sleep = ms => new Promise(r => setTimeout(r, ms));
    const randomSeconds = (min, max) => Math.random() * (max - min) + min;

    // Although he never used it he has AI training
    // Classification
    // use opencv to scrape adobe stock pictures
    // rotate all at random offsets
    // generate output data set image_rotationdegrees.jpg
    // train a neural network on that data (transformed image) and calculate how many degrees its been rotated

    await sleep(randomSeconds(1600, 4000));

    // Remove the video list on the right because it will always produce more videos
    // document.querySelector(SEL_VIDEO_LIST_DIV).remove();

    // Keep track of where we scrolled to on the last iteration
    // If the comments list height doesn't change, then
    // we most likely hit the bottom of the list

    // let oldDivCount = 0;
    const preScrollNumComments = document.querySelectorAll(SEL_LIKE_DIV).length;
    let hits = 0;
    let finished = false;
    while (!finished) {
      await window.scrollBy(0, window.innerHeight * randomSeconds(0.7, 0.9));

      // Wait for new comments to load
      await sleep(randomSeconds(1200, 2100));

      // If the comments div hasn't gotten taller then we've likely hit the end
      const postScrollNumComments = document.querySelectorAll(SEL_LIKE_DIV).length;
      if (postScrollNumComments > preScrollNumComments) {
        break;
      }
      hits++;
      if (hits == maxHits) {
        finished = true;
        break;
      }
    }

    const results = document.querySelectorAll(SEL_LIKE_DIV);
    for (var i = 0; i < results.length; i++) {

      // Liked comments have a g tag so we want to skip them
      if (results[i].querySelector('g') == null) {
        await sleep(randomSeconds(1000, 3100));
        if (randomSeconds(0, 10) < 9) {
          results[i].click();
        }
        count ++;
      }
    }
    return {count: count, finished: finished};
  }, SEL_LIKE_DIV, SEL_COMMENTS_DIV, SEL_VIDEO_LIST_DIV, maxHits).catch((e) => {
    console.log('Error liking comments: ' + e);
  });

  video.commentsLiked += result.count;
  video.finished = result.finished;

  if (!video.finished && video.commentsLiked >= 250) {
    video.finished = true;
  }

  console.log('count: ' + video.commentsLiked + ', finished: ' + video.finished);

  if (video.finished) {
    commentPage.close();
  }
  return result.count;
}

module.exports = {
	presentLogin,
	getVideoUrls,
	likeCommentsBatch,
}