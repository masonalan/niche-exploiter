
const puppeteer = require('puppeteer-extra');
const stealth = require('puppeteer-extra-plugin-stealth');
const {executablePath} = require('puppeteer');

// Define TikTok related constants here
const tiktokBaseUrl = "https://tiktok.com/";
const tiktokLoginUrl = "login/phone-or-email/email/";

// Define credentials here
// const email = "";
const password = "";

// Define constants for selectors here
const SEL_VIDEO_DIV = 'div.tiktok-x6y88p-DivItemContainerV2.e19c29qe7';

const SEL_LIKE_DIV = 'div[class*="DivLikeWrapper-StyledLikeWrapper"]';
const SEL_EMAIL_FIELD = 'input[name="username"]';
const SEL_PASSWORD_FIELD = 'input[type="password"]';

puppeteer.use(stealth())

let browser;
let page;

async function presentLogin() {
	browser = await puppeteer.launch({
    	headless: false,
    	executablePath: executablePath()
  	});
  	page = await browser.newPage();
  	await page.goto(tiktokBaseUrl + tiktokLoginUrl);

  	// await page.waitForSelector(SEL_EMAIL_FIELD);
  	// await page.type(SEL_EMAIL_FIELD, email);
  	// await page.type(SEL_PASSWORD_FIELD, password);
}

async function getVideoUrls(username) {
	await page.goto(tiktokBaseUrl + '@' + username);
  await page.waitForSelector(SEL_VIDEO_DIV);
	const videoDivs = await page.$$(SEL_VIDEO_DIV);
	let videoUrls = [];

	for (var i = videoDivs.length - 1; i >= 0; i--) {
		const url = await videoDivs[i].$eval('a', a => {
			if (typeof a.getAttribute === 'function') {
				return a.getAttribute('href');
			} else {
				return "";
			}
		});
		if (url !== "") {
			videoUrls.push(url);
		}
	}
	return videoUrls;
}

async function likeComments(videoUrl) {
	let commentPage = await browser.newPage();
	await commentPage.goto(videoUrl);
  await commentPage.waitForSelector(SEL_LIKE_DIV);
  await commentPage.evaluate(async () => {
  	const sleep = ms => new Promise(r => setTimeout(r, ms));

    // Todo: figure out how to use SEL_LIKE_DIV instead of a string literal
  	const results = document.querySelectorAll('div[class*="DivLikeWrapper-StyledLikeWrapper"]');
  	for (var i = 0; i < results.length; i++) {

  		// Liked comments have a g tag so we want to skip them
  		if (results[i].querySelector('g') == null) {
  			await sleep(1000);
  			results[i].click();
  		}
  	}
  }).catch((e) => {
  	console.log('Error liking comments: ' + e);
  });
}

module.exports = {
	presentLogin,
	getVideoUrls,
	likeComments,
}